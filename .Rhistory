q()
source("run_analysis.R")
?rm
?subset
?as.POSIXct
dev.copy
?dev.copy
?range
?plot
?legend
set.seed(10)
x<-rnorm(100)
f<-rep(0:1, each=50)
y<- rnorm(100, sd=0.5) + f*x
f<-factor(f, labels=c("Group 1", "Group 2"))
xyplot(y~x|f, layout=c(2, 1))
load(lattice)
install.packages(lattice)
install.packages("lattice)
install.packages("lattice")
xyplot(y~x|f, layout=c(2, 1))
load(lattice)
install.packages("lattice")
library(lattice)
xyplot(y~x|f, layout=c(2, 1))
xyplot(y~x|f, panel=function(x, y, ...) {panel.xyplot(x, y, ...) panel.abline(h=median(y), lty=2)})
xyplot(y~x|f, panel=function(x, y, ...) {
panel.xyplot(x, y, ...)
panel.abline(h = median(y), lty=2)
})
xyplot(y~x|f, panel=function(x, y, ...) {
panel.xyplot(x, y, ...)
lmline(x, y, col=3)
})
xyplot(y~x|f, panel=function(x, y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, col=2)
})
xyplot(y~x|f, panel=function(x, y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, col=3)
})
install.packages("ggplot2")
library(ggplot2)
str(mpg
)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth=2)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?par
par()
?splom
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
?qplot
?text
?axis
?llines
?points
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?points
?axis
?text
?trellis.par.set
?text
?points
?axis
?panel.abline
sd(apply(matrix(runif(10000), 1000), 1, mean))
1/144
1/sqrt(12)
1/sqrt(12 * 10)
sd(apply(matrix(runif(10000), 1000), 1, mean))
sd(apply(matrix(runif(100000), 10000), 1, mean))
sd(apply(matrix(runif(1000000), 100000), 1, mean))
sd(apply(matrix(runif(10000000), 1000000), 1, mean))
sd(apply(matrix(runif(10000000), 1000000), 1, mean))
sd(apply(matrix(rpois(100000, 4), 10000), 1, mean))
4/sqrt(10)
2/sqrt(10)
sd(apply(matrix(rpois(1000000, 4), 100000), 1, mean))
sd(apply(matrix(rpois(1000000, 4), 100000), 1, mean))
sd(apply(matrix(rpois(1000000, 4), 100000), 1, mean))
?sample
sqrt(7.92)
choose(8,7) * .5^8 + choose(8,8) * .5^8
?pbinom
pbinom(6, size=8, prob=0.5, lower.tail=FALSE)
pbinom(6, size=8, prob=0.5, lower.tail=FALSE)
pbinom(5, size=8, prob=0.5, lower.tail=FALSE)
qnorm(.95, mean = 100, sd = 2)
1.645 * 2 + 100
?qnorm
pnorm(1160, mean = 1020, sd=50, lower.tail = FALSE)
qnorm(.75, mean=1020, sd=50)
ppois(3, lambda=2.5*4)
pbinom(2, size = 500, prob = 0.01)
ppois(2, lambda = 500 * 0.01)
pbinom(20, size = 5000, prob = 0.01)
pbinom(2, size = 5000, prob = 0.01)
pbinom(2, size = 5000, prob = 0.001)
?cumsum
n<-1000
means <- cumsum(rnorm(n))/(1:n)
head(means)
plot(means)
plot(means ~ 1:n)
plot(x = 1:n, y = means)
par(mar = rep(2,4))
plot(x = 1:n, y = means)
plot(x = 1:n, y = means, type = "l")
means <- cumsum(sample(0:1, n, replace = TRUE)) / (1:n)
plot(x = 1:n, y = means, type = "l")
?sample
rolls <- sample(1:6, 10000, replace = TRUE)
head(rolls, 20)
mean(rolls)
rolls <- rolls - 2.5
rolls <- rolls - 1
?qnorm
qnorm(0.5)
qnorm(0.975)
?sapply
?rbinom
n<-20
pvals <- seq(0.05, 0.95, by = 0.05)
nosim <- 1000
coverage <- sapply(pvals, function(p) {})
coverage <- sapply(pvals, function(p) {
ph <- rbinom(nosim, prob = p, size = n) / n
ll <- ph - qnorm(0.975) * sqrt(ph * (1-ph)/n)
ul <- ph + qnorm(0.975) * sqrt(ph * (1-ph)/n)
mean(ll < p & ul > p)
})
plot(coverage)
plot(coverage, type = l)
plot(coverage, type = "l")
nosim <- 10000
coverage <- sapply(pvals, function(p) {
ph <- rbinom(nosim, prob = p, size = n) / n
ll <- ph - qnorm(0.975) * sqrt(ph * (1-ph)/n)
ul <- ph + qnorm(0.975) * sqrt(ph * (1-ph)/n)
mean(ll < p & ul > p)
})
plot(coverage, type = "l")
pbinom(4, prob=.5, size = 6, lower.tail=F)
?pnorm
dnorm(c(0.1, 0.5, 0.95))
dnorm(c(-1, 0, 1))
dnorm(c(-2, -1, 0, 1))
qnorm(0.3464)
qnorm(0.5)
?ppois
ppois(10, lambda = 15)
3.0 + c(-1, 1) * qnorm(0.975) * 1.1 / sqrt(100)
pbinom(54, size = 100, prob = .5, lower.tail = F)
pnorm(-1.28)
pt(1.28)
pt(1.28, df = 16)
pt(-1.28, df = 16)
4 / 1.28
pt(3.125, 16)
library(MASS)
data(shuttle)
summary(shuttle
)
head(shuttle)
length(shuttle)
shuttle
head(shuttle)
?ifelse
shuttle$an <- ifelse(as.character(shuttle$auto) == "auto", 1, 0)
an <- ifelse(as.character(shuttle$auto) == "auto", 1, 0)
shuttle$atr <- as.character(shuttle$auto)
summary(shuttle)
?step
fit <- lm(shuttle$use ~ shuttle$wind, data = shuttle)
summary(lm)
summary(git)
summary(fit)
shuttle[,"auto"] <- ifelse(as.character(shuttle[,"use"]) == "auto", 1, 0)
fit <- lm(shuttle$auto ~ shuttle$wind, data = shuttle)
summary(fit)
fit <- glm(shuttle$auto ~ shuttle$wind, data = shuttle)
summary(fit)
shuttle[,"w"] <- ifelse(as.character(shuttle[,"wind"]) == "head", 1, 0)
fit <- glm(shuttle$auto ~ shuttle$w, data = shuttle)
summary(fit)
fit <- glm(shuttle$auto ~ shuttle$w, data = shuttle, family = "binomial")
summary(fit)
exp(fit$coeff)
fit2 <- glm(shuttle$auto ~ shuttle$w + shuttle$magn, data = shuttle, family = "binomial")
exp(fit2$coeff)
library(InsectSprays)
data(InsectSprays)
fit <- glm(shuttle$auto ~ shuttle$w, data = shuttle, family = "binomial")
summary(fit)
shuttle[,"nauto"] <- ifelse(as.character(shuttle[,"use"]) == "auto", 0, 1)
fit <- glm(shuttle$nauto ~ shuttle$w, data = shuttle, family = "binomial")
summary(fit)
h <- c(153, 129, 148, 160, 143, 163, 150, 148, 157, 148, 165, 142, 157, 175, 161, 146, 139, 163, 149, 161, 155, 163, 147, 141, 148, 167, 166)
hist(h)
plot(h, type='l')
hist(h)
?hist
seq(1, 10)
seq(120, 180, by = 5)
hist(h, breaks = seq(128, 178, by = 5))
hist(h, breaks = seq(128, 178, by = 1))
hist(h, breaks = seq(128, 178, by = 2))
plot(h, type='l')
plot(x = h, type='l')
?plot
df <- data.frame(ht = h, n = seq(1, length(h)))
df
plot(n ~ ht, data = df)
plot(n ~ ht, data = df, type = 'l')
plot(n ~ ht, data = df, type = 'hist')
?plot
plot(df)
plot(df, type = 'l')
plot(y = df.n, x = df.ht, type = 'l')
plot(y = df$n, x = df$ht, type = 'l')
g <- c('M', 'F', 'F', 'F', 'M', 'M', 'M', 'F', 'M', 'M', 'M', 'F', 'F', 'M', 'M', F', 'M', 'M', 'F', 'M', 'M', 'F', X', 'M', 'M', 'F', 'F', 'X')
g <- c('M', 'F', 'F', 'F', 'M', 'M', 'M', 'F', 'M', 'M', 'M', 'F', 'F', 'M', 'M', 'F', 'M', 'M', 'F', 'M', 'M', 'F', X', 'M', 'M', 'F', 'F', 'X')
g <- c('M', 'F', 'F', 'F', 'M', 'M', 'M', 'F', 'M', 'M', 'M', 'F', 'F', 'M', 'M', 'F', 'M', 'M', 'F', 'M', 'M', 'F', 'X', 'M', 'M', 'F', 'F', 'X')
df$g <- f
df$g <- g
g <- c('M', 'F', 'F', 'F', 'M', 'F', 'M', 'F', 'M', 'M', 'M', 'F', 'F', 'M', 'M', 'F', 'M', 'M', 'F', 'M', 'M', 'F', 'M', 'M', 'M', 'F', 'F')
df$g <- g
plot(y = df$n, x = df$ht, type = 'l', ci.col = df$g)
plot(y = df$n, x = df$ht, type = 'l', col = df$g)
df$g < as.factor(g)
df$g <- as.factor(g)
plot(y = df$n, x = df$ht, type = 'l', col = df$g)
hist(df)
hist(ht ~ n, data = df, col = g)
hist(x = df$ht, y = df$n, col = df$g)
hist(y = df$n, x = df$ht, col = df$g)
hist(df$n ~ df$ht, col = df$g)
hist(df)
hist(df)
hist(x = df$ht, y = df$n, col = df$g)
hist(y = df$n, x = df$ht, col = df$g)
plot(n ~ ht, data = df, type = 'l')
plot(n ~ ht, data = df, type = 'h')
hist(h)
source('~/r/capstone/build-corpus.R')
corpus <- buildCorpus("partial")
corpus <- cleanCorpus(corpus)
inspect(corpus)
head(corpus[[1]])
options(java.parameters = "-Xmx4g")
source('build-corpus2.R')
source('build-model2.R')
setwd("~/r/capstone/code")
source('build-corpus2.R')
source('build-model2.R')
library(tm)
library(RWeka)
library(dplyr)
corpus <- BuildCleanCorpus(dir = "full", base.dir = "~/r/capstone/data", split = TRUE)
model <- BuildMultiGramModel(corpus, min.count = 1)
PredictMultiGramDfs(model, "The guy in front of me just bought a pound of bacon, a bouquet, and a case of")
PredictMultiGramDfs(model, "You're the reason why I smile everyday. Can you follow me please? It would mean the")
PredictMultiGramDfs(model, "Hey sunshine, can you follow me and make me the")
PredictMultiGramDfs(model, "Very early observations on the Bills game: Offense still struggling but the")
PredictMultiGramDfs(model, "Go on a romantic date at the")
PredictMultiGramDfs(model, "Well I'm pretty sure my granny has some old bagpipes in her garage I'll dust them off and be on my")
PredictMultiGramDfs(model, "Ohhhhh #PointBreak is on tomorrow. Love that film and haven't seen it in quite some")
PredictMultiGramDfs(model, "After the ice bucket challenge Louis will push his long wet hair out of his eyes with his little")
PredictMultiGramDfs(model, "Be grateful for the good times and keep the faith during the")
PredictMultiGramDfs(model, "If this isn't the cutest thing you've ever seen, then you must be")
tdm <- BuildTdm(corpus, 4)
df  <- ExtractDataFromTdm(tdm)
PredictMultiGramDfs(model, "The guy in front of me just bought a pound of bacon, a bouquet, and a case of")
PredictMultiGramDfs(model, "You're the reason why I smile everyday. Can you follow me please? It would mean the")
tdm <- NULL # explicitly free space
model[[4]] <- df
model[['4']] <- df
names(model)
model[[4]] <- NULL
head(model)
PredictMultiGramDfs(model, "The guy in front of me just bought a pound of bacon, a bouquet, and a case of")
PredictMultiGramDfs(model, "You're the reason why I smile everyday. Can you follow me please? It would mean the")
PredictMultiGramDfs(model, "Hey sunshine, can you follow me and make me the")
PredictMultiGramDfs(model, "Very early observations on the Bills game: Offense still struggling but the")
PredictMultiGramDfs(model, "Go on a romantic date at the")
PredictMultiGramDfs(model, "Well I'm pretty sure my granny has some old bagpipes in her garage I'll dust them off and be on my")
PredictMultiGramDfs(model, "Ohhhhh #PointBreak is on tomorrow. Love that film and haven't seen it in quite some")
PredictMultiGramDfs(model, "After the ice bucket challenge Louis will push his long wet hair out of his eyes with his little")
PredictMultiGramDfs(model, "Be grateful for the good times and keep the faith during the")
PredictMultiGramDfs(model, "If this isn't the cutest thing you've ever seen, then you must be")
stopwords
stopwords("en")
s <- stopwords("en")
"on" %in% s
c("on", "my", "way") %in% s
c("must", "be", "on", "my", "way") %in% s
"you" %in% s
"is" %in% s
"still" %in% s
"but" %in%
s
v <- c("this is a dash-connected underscore_connected dot.connected plus+connected colon:connected slash/connected apostrophe'connected equal=connected percent%connected pound#connected at@connected ampersand&connected string.")
vs <- VectorSource(c)
vs <- VectorSource(v)
vs
c <- BuildCorpus(vs)
c <- Corpus(vs)
tkzr <- function(doc) {
require(RWeka)
RWeka::NGramTokenizer(doc, control = Weka_control(min = 1, max = 1)
}
tkzr <- function(doc) {
require(RWeka)
RWeka::NGramTokenizer(doc, control = Weka_control(min = 1, max = 1))
}
t <- TermDocumentMatrix(c, control = list(tokenize = tkzr))
t
t$dimnames$Terms
source('~/r/capstone/code/build-corpus2.R')
source('~/r/capstone/code/build-model2.R')
options(java.parameters = "-Xmx4g")
source('build-corpus2.R')
source('build-model2.R')
library(tm)
library(RWeka)
library(dplyr)
corpus <- BuildCleanCorpus(dir = "full", base.dir = "~/r/capstone/data", split = TRUE)
model <- BuildMultiGramModel(corpus, min.count = 1)
PredictMultiGramDfs(model, "The guy in front of me just bought a pound of bacon, a bouquet, and a case of")
PredictMultiGramDfs(model, "You're the reason why I smile everyday. Can you follow me please? It would mean the")
PredictMultiGramDfs(model, "Hey sunshine, can you follow me and make me the")
PredictMultiGramDfs(model, "Very early observations on the Bills game: Offense still struggling but the")
PredictMultiGramDfs(model, "Go on a romantic date at the")
PredictMultiGramDfs(model, "Well I'm pretty sure my granny has some old bagpipes in her garage I'll dust them off and be on my")
PredictMultiGramDfs(model, "Ohhhhh #PointBreak is on tomorrow. Love that film and haven't seen it in quite some")
PredictMultiGramDfs(model, "After the ice bucket challenge Louis will push his long wet hair out of his eyes with his little")
PredictMultiGramDfs(model, "Be grateful for the good times and keep the faith during the")
PredictMultiGramDfs(model, "If this isn't the cutest thing you've ever seen, then you must be")
corpus <- BuildCleanCorpus(dir = "full", base.dir = "~/r/capstone/data", split = TRUE)
model <- BuildMultiGramModel(corpus, min.count = 1)
PredictMultiGramDfs(model, "The guy in front of me just bought a pound of bacon, a bouquet, and a case of")
PredictMultiGramDfs(model, "You're the reason why I smile everyday. Can you follow me please? It would mean the")
PredictMultiGramDfs(model, "Hey sunshine, can you follow me and make me the")
PredictMultiGramDfs(model, "Very early observations on the Bills game: Offense still struggling but the")
PredictMultiGramDfs(model, "Go on a romantic date at the")
PredictMultiGramDfs(model, "Well I'm pretty sure my granny has some old bagpipes in her garage I'll dust them off and be on my")
PredictMultiGramDfs(model, "Ohhhhh #PointBreak is on tomorrow. Love that film and haven't seen it in quite some")
PredictMultiGramDfs(model, "After the ice bucket challenge Louis will push his long wet hair out of his eyes with his little")
PredictMultiGramDfs(model, "Be grateful for the good times and keep the faith during the")
PredictMultiGramDfs(model, "If this isn't the cutest thing you've ever seen, then you must be")
source('~/r/capstone/code/build-model2.R')
source('~/r/capstone/code/build-corpus2.R')
StopwordList <- function() {
c("i", "me", "my", "myself", "we", "our", "ours", "ourselves", "you",
"your", "yours", "yourself", "yourselves","he", "him", "his", "himself", "she",
"her", "hers", "herself", "it", "its", "itself", "they", "them", "their",
"theirs", "themselves","what", "which", "who", "whom", "this", "that", "these",
"those", "am", "is", "are", "was", "were", "be", "been", "being",
"have", "has", "had", "having", "do", "does", "did", "doing", "would",
"should", "could", "ought", "i'm", "you're", "he's", "she's", "it's", "we're",
"they're", "i've", "you've", "we've", "they've", "i'd", "you'd", "he'd", "she'd",
"we'd", "they'd", "i'll", "you'll", "he'll", "she'll", "we'll", "they'll", "isn't",
"aren't", "wasn't", "weren't", "hasn't", "haven't", "hadn't", "doesn't", "don't", "didn't",
"won't", "wouldn't", "shan't", "shouldn't", "can't", "cannot", "couldn't", "mustn't", "let's",
"that's", "who's", "what's", "here's", "there's", "when's", "where's", "why's", "how's",
"a", "an", "the", "and", "but", "if", "or", "because", "as",
"until", "while", "of", "at", "by", "for", "with", "about", "against",
"between", "into", "through", "during", "before", "after", "above", "below", "to",
"from", "up", "down", "in", "out", "on", "off", "over", "under",
"again", "further", "then", "once", "here", "there", "when", "where", "why",
"how", "all", "any", "both", "each", "few", "more", "most", "other",
"some", "such", "no", "nor", "not", "only", "own", "same", "so",
"than", "too", "very")
}
sw <- StopwordList
sw <- StopwordList()
sw
"in" %in% sw
"harlequin" %in% sw
source('~/r/capstone/code/build-model2.R')
stopwordList <- sw
JoinStopwords <- function(text) {
v <- gregexpr(" ", text)
f <- v[[1]]
for (i in 2:length(v)) {
if (v[[1]] %in% stopwordList) {
j <- "_"
} else {
j <- " "
}
f <- paste(c(f, v[[i]]), collapse = j)
}
f
}
JoinStopwords("this is the time for all good men to come to the aid of their countrymen")
debugSource('~/r/capstone/code/build-model2.R')
JoinStopwords("this is the time for all good men to come to the aid of their countrymen")
v <- gregexp(" ", "this is the time for")
v <- gregexpr(" ", "this is the time for")
v
?regexpr
v <- grep(" ", "this is the time for")
v
v <- grep(" ", "this is the time for", value = TRUE
)
v
v <- grep(" \\s", "this is the time for", value = TRUE
)
v
v <- grep("\\s", "this is the time for", value = TRUE
)
v
v <- grep("\s", "this is the time for", value = TRUE
)
strsplit(x = "now is not the time", split = " ")
debugSource('~/r/capstone/code/build-model2.R')
JoinStopwords("this is the time for all good men to come to the aid of their countrymen")
v
v <- strsplit(x = "now is not the time", split = " ")
v
a <- v[[1]]
a
debugSource('~/r/capstone/code/build-model2.R')
JoinStopwords("this is the time for all good men to come to the aid of their countrymen")
debugSource('~/r/capstone/code/build-model2.R')
JoinStopwords("this is the time for all good men to come to the aid of their countrymen")
debugSource('~/r/capstone/code/build-model2.R')
source('~/r/capstone/code/predict4.R')
stopwordList <- StopwordList()
PredictMultiGramDfs(model, "The guy in front of me just bought a pound of bacon, a bouquet, and a case of")
PredictMultiGramDfs(model, "You're the reason why I smile everyday. Can you follow me please? It would mean the")
debugSource('~/r/capstone/code/build-model2.R')
PredictMultiGramDfs(model, "The guy in front of me just bought a pound of bacon, a bouquet, and a case of")
PredictMultiGramDfs(model, "You're the reason why I smile everyday. Can you follow me please? It would mean the")
PredictMultiGramDfs(model, "The guy in front of me just bought a pound of bacon, a bouquet, and a case of")
PredictMultiGramDfs(model, "You're the reason why I smile everyday. Can you follow me please? It would mean the")
debugSource('~/r/capstone/code/build-model2.R')
PredictMultiGramDfs(model, "The guy in front of me just bought a pound of bacon, a bouquet, and a case of")
PredictMultiGramDfs(model, "You're the reason why I smile everyday. Can you follow me please? It would mean the")
c
c
PredictMultiGramDfs(model, "The guy in front of me just bought a pound of bacon, a bouquet, and a case of")
PredictMultiGramDfs(model, "You're the reason why I smile everyday. Can you follow me please? It would mean the")
PredictMultiGramDfs(model, "Hey sunshine, can you follow me and make me the")
PredictMultiGramDfs(model, "Very early observations on the Bills game: Offense still struggling but the")
PredictMultiGramDfs(model, "Hey sunshine, can you follow me and make me the")
PredictMultiGramDfs(model, "Very early observations on the Bills game: Offense still struggling but the")
sum(matching.indices)
PredictMultiGramDfs(model, "Hey sunshine, can you follow me and make me the")
PredictMultiGramDfs(model, "Very early observations on the Bills game: Offense still struggling but the")
matching.terms %>%  top_n(n = 3, wt = total.freq)
matching.terms %>%  top_n(n = 10, wt = total.freq)
matching.terms %>%  top_n(n = 10, wt = total.freq) %>% arrange(total.freq)
text
