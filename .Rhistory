q()
source("run_analysis.R")
?rm
?subset
?as.POSIXct
dev.copy
?dev.copy
?range
?plot
?legend
set.seed(10)
x<-rnorm(100)
f<-rep(0:1, each=50)
y<- rnorm(100, sd=0.5) + f*x
f<-factor(f, labels=c("Group 1", "Group 2"))
xyplot(y~x|f, layout=c(2, 1))
load(lattice)
install.packages(lattice)
install.packages("lattice)
install.packages("lattice")
xyplot(y~x|f, layout=c(2, 1))
load(lattice)
install.packages("lattice")
library(lattice)
xyplot(y~x|f, layout=c(2, 1))
xyplot(y~x|f, panel=function(x, y, ...) {panel.xyplot(x, y, ...) panel.abline(h=median(y), lty=2)})
xyplot(y~x|f, panel=function(x, y, ...) {
panel.xyplot(x, y, ...)
panel.abline(h = median(y), lty=2)
})
xyplot(y~x|f, panel=function(x, y, ...) {
panel.xyplot(x, y, ...)
lmline(x, y, col=3)
})
xyplot(y~x|f, panel=function(x, y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, col=2)
})
xyplot(y~x|f, panel=function(x, y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, col=3)
})
install.packages("ggplot2")
library(ggplot2)
str(mpg
)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth=2)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?par
par()
?splom
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
?qplot
?text
?axis
?llines
?points
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?points
?axis
?text
?trellis.par.set
?text
?points
?axis
?panel.abline
sd(apply(matrix(runif(10000), 1000), 1, mean))
1/144
1/sqrt(12)
1/sqrt(12 * 10)
sd(apply(matrix(runif(10000), 1000), 1, mean))
sd(apply(matrix(runif(100000), 10000), 1, mean))
sd(apply(matrix(runif(1000000), 100000), 1, mean))
sd(apply(matrix(runif(10000000), 1000000), 1, mean))
sd(apply(matrix(runif(10000000), 1000000), 1, mean))
sd(apply(matrix(rpois(100000, 4), 10000), 1, mean))
4/sqrt(10)
2/sqrt(10)
sd(apply(matrix(rpois(1000000, 4), 100000), 1, mean))
sd(apply(matrix(rpois(1000000, 4), 100000), 1, mean))
sd(apply(matrix(rpois(1000000, 4), 100000), 1, mean))
?sample
sqrt(7.92)
choose(8,7) * .5^8 + choose(8,8) * .5^8
?pbinom
pbinom(6, size=8, prob=0.5, lower.tail=FALSE)
pbinom(6, size=8, prob=0.5, lower.tail=FALSE)
pbinom(5, size=8, prob=0.5, lower.tail=FALSE)
qnorm(.95, mean = 100, sd = 2)
1.645 * 2 + 100
?qnorm
pnorm(1160, mean = 1020, sd=50, lower.tail = FALSE)
qnorm(.75, mean=1020, sd=50)
ppois(3, lambda=2.5*4)
pbinom(2, size = 500, prob = 0.01)
ppois(2, lambda = 500 * 0.01)
pbinom(20, size = 5000, prob = 0.01)
pbinom(2, size = 5000, prob = 0.01)
pbinom(2, size = 5000, prob = 0.001)
?cumsum
n<-1000
means <- cumsum(rnorm(n))/(1:n)
head(means)
plot(means)
plot(means ~ 1:n)
plot(x = 1:n, y = means)
par(mar = rep(2,4))
plot(x = 1:n, y = means)
plot(x = 1:n, y = means, type = "l")
means <- cumsum(sample(0:1, n, replace = TRUE)) / (1:n)
plot(x = 1:n, y = means, type = "l")
?sample
rolls <- sample(1:6, 10000, replace = TRUE)
head(rolls, 20)
mean(rolls)
rolls <- rolls - 2.5
rolls <- rolls - 1
?qnorm
qnorm(0.5)
qnorm(0.975)
?sapply
?rbinom
n<-20
pvals <- seq(0.05, 0.95, by = 0.05)
nosim <- 1000
coverage <- sapply(pvals, function(p) {})
coverage <- sapply(pvals, function(p) {
ph <- rbinom(nosim, prob = p, size = n) / n
ll <- ph - qnorm(0.975) * sqrt(ph * (1-ph)/n)
ul <- ph + qnorm(0.975) * sqrt(ph * (1-ph)/n)
mean(ll < p & ul > p)
})
plot(coverage)
plot(coverage, type = l)
plot(coverage, type = "l")
nosim <- 10000
coverage <- sapply(pvals, function(p) {
ph <- rbinom(nosim, prob = p, size = n) / n
ll <- ph - qnorm(0.975) * sqrt(ph * (1-ph)/n)
ul <- ph + qnorm(0.975) * sqrt(ph * (1-ph)/n)
mean(ll < p & ul > p)
})
plot(coverage, type = "l")
pbinom(4, prob=.5, size = 6, lower.tail=F)
?pnorm
dnorm(c(0.1, 0.5, 0.95))
dnorm(c(-1, 0, 1))
dnorm(c(-2, -1, 0, 1))
qnorm(0.3464)
qnorm(0.5)
?ppois
ppois(10, lambda = 15)
3.0 + c(-1, 1) * qnorm(0.975) * 1.1 / sqrt(100)
pbinom(54, size = 100, prob = .5, lower.tail = F)
pnorm(-1.28)
pt(1.28)
pt(1.28, df = 16)
pt(-1.28, df = 16)
4 / 1.28
pt(3.125, 16)
library(MASS)
data(shuttle)
summary(shuttle
)
head(shuttle)
length(shuttle)
shuttle
head(shuttle)
?ifelse
shuttle$an <- ifelse(as.character(shuttle$auto) == "auto", 1, 0)
an <- ifelse(as.character(shuttle$auto) == "auto", 1, 0)
shuttle$atr <- as.character(shuttle$auto)
summary(shuttle)
?step
fit <- lm(shuttle$use ~ shuttle$wind, data = shuttle)
summary(lm)
summary(git)
summary(fit)
shuttle[,"auto"] <- ifelse(as.character(shuttle[,"use"]) == "auto", 1, 0)
fit <- lm(shuttle$auto ~ shuttle$wind, data = shuttle)
summary(fit)
fit <- glm(shuttle$auto ~ shuttle$wind, data = shuttle)
summary(fit)
shuttle[,"w"] <- ifelse(as.character(shuttle[,"wind"]) == "head", 1, 0)
fit <- glm(shuttle$auto ~ shuttle$w, data = shuttle)
summary(fit)
fit <- glm(shuttle$auto ~ shuttle$w, data = shuttle, family = "binomial")
summary(fit)
exp(fit$coeff)
fit2 <- glm(shuttle$auto ~ shuttle$w + shuttle$magn, data = shuttle, family = "binomial")
exp(fit2$coeff)
library(InsectSprays)
data(InsectSprays)
fit <- glm(shuttle$auto ~ shuttle$w, data = shuttle, family = "binomial")
summary(fit)
shuttle[,"nauto"] <- ifelse(as.character(shuttle[,"use"]) == "auto", 0, 1)
fit <- glm(shuttle$nauto ~ shuttle$w, data = shuttle, family = "binomial")
summary(fit)
source('~/r/capstone/code/predict-hash.R')
setwd("~/r/capstone/code")
source('~/r/capstone/code/predict-hash.R')
build.model("~/r/capstone/short", 3)
source('~/r/capstone/code/predict-hash.R')
build.model("~/r/capstone/short", 3)
m <- build.model("~/r/capstone/short", 3)
printenv(m)
predict(model, c("DON'T", "WANT" , "TO"), 3)
predict(model, c("DON'T", "WANT"))
source('~/r/capstone/code/model-hash.R')
predict(model, c("DON'T", "WANT"))
model
predict(m, c("DON'T", "WANT"))
m
predict(m, c("DON'T", "WANT", "TO"))
printenv(m)
f <- list.files("~/r/capstone/data")
f
for (ff in f) { print(f)}
for (ff in f) { print(ff)}
paste("~/r/capstone/data", "en_US.txt", sep = "/")
f <- list.files("~/r/capstone/data", pattern = "\\.txt$")
f <- list.files("~/r/capstone/data", pattern = "\\.txt")
f <- list.files("~/r/capstone/data", pattern = "\.txt")
f <- list.files("~/r/capstone/data", pattern = "txt")
f <- list.files("~/r/capstone", pattern = "txt")
f <- list.files("~/r/capstone")
f <- list.files("~/r/capstone/data")
f
list.files("~/r/capstone/data")
list.files("~/r/capstone/data", pattern = "txt")
list.files("~/r/capstone/data", pattern = "\\.txt")
list.files("~/r/capstone/data", pattern = "\\.txt$")
list.files("~/r/capstone/data", pattern = "\\.news$")
list.files("~/r/capstone/data", pattern = "\\.news")
source('~/r/capstone/code/token-filter.R')
tokenize("~/r/capstone/short", "short-tokens.txt", 1.0, TRUE)
source('~/r/capstone/code/token-filter.R')
tokenize("~/r/capstone/short", "short-tokens.txt", 1.0, TRUE)
source('~/r/capstone/code/token-filter.R')
source('~/r/capstone/code/token-filter.R')
tokenize("~/r/capstone/short", "short-tokens.txt", 1.0, TRUE)
warnings()
source('~/r/capstone/code/token-filter.R')
source('~/r/capstone/code/token-filter.R')
tokenize("~/r/capstone/short", "short-tokens.txt", 1.0, TRUE)
source('~/r/capstone/code/token-filter.R')
tokenize("~/r/capstone/short", "short-tokens.txt", 1.0, TRUE)
source('~/r/capstone/code/token-filter.R')
tokenize("~/r/capstone/short", "short-tokens.txt", 1.0, TRUE)
source('~/r/capstone/code/token-filter.R')
tokenize("~/r/capstone/short", "short-tokens.txt", 1.0, TRUE)
source('~/r/capstone/code/token-filter.R')
tokenize("~/r/capstone/short", "short-tokens.txt", 1.0, TRUE)
tokenize("~/r/capstone/testdata", "short-tokens.txt", 1.0, TRUE)
source('~/r/capstone/code/token-filter.R')
tokenize("~/r/capstone/testdata", "short-tokens.txt", 1.0, TRUE)
h
h < hash()
h <- hash()
.set(h, a, "x")
.set(h, "a", "x")
h
print(h)
library(hash)
h <- hash()
.set(h, "a", "x")
h
h$a
.set(h, a = "foo")
h
.set(h, a, "foo")
.set(h, a = "foo")
h
print(h)
h <- hash()
h
hash
install.packages("hash")
install.packages("hash")
install.packages("hash")
h <- hash()
h
print(h)
.set(h, "a", "x")
h
source('~/r/capstone/code/predict-hash.R')
source('~/r/capstone/code/predict-hash.R')
h
add.to.map(h, c("a", "b", "c"))
debugSource('~/r/capstone/code/model-hash.R')
debugSource('~/r/capstone/code/model-hash.R')
add.to.map(h, c("a", "b", "c"))
add.to.map(h, "TO THE", "STORE")
h
add.to.map(h, "TO THE", "MAX")
add.to.map(h, "TO THE", "MAX")
h
most.common(h[["TO THE"]])
max(2, 5)
min(2, 5)
min(c(3, 5))
max(c(3, 44, -333 5))
max(c(3, 44, -333, 5))
min(c(3, 44, -333, 5))
debugSource('~/r/capstone/code/model-hash.R')
h
build.map(h, c("i", "want", "to", "go", "to", "the", "store", "now"))
debugSource('~/r/capstone/code/model-hash.R')
build.map(h, c("i", "want", "to", "go", "to", "the", "store", "now"))
debugSource('~/r/capstone/code/model-hash.R')
build.map(h, c("i", "want", "to", "go", "to", "the", "store", "now"))
h
printenv(h)
build.map(h, c("i", "want", "to", "go", "to", "the", "store", "now"))
printenv(h)
build.map(h, c("i", "would", "like" , "to", "see", "you", "try"))
printenv(h)
model <- build.model()
model <- build.model("short-tokens.txt")
printenv(model)
model
source('~/r/capstone/code/model-hash.R')
source('~/r/capstone/code/model-hash.R')
model <- build.model("short-tokens.txt")
source('~/r/capstone/code/model-hash.R')
model <- build.model("short-tokens.txt")
model <- build.model("shorter.txt")
source('~/r/capstone/code/model-hash.R')
model <- build.model("shorter.txt")
model <- build.model("short-tokens.txt")
source('~/r/capstone/code/model-hash.R')
model <- build.model("short-tokens.txt")
source('~/r/capstone/code/predict-hash.R')
head(model)
model
length(model)
h
is.hash(h)
is.hash(h$a)
is.hash(h[["would like to"]])
is.hash(h[["would like not to"]])
trim.model(h)
source('~/r/capstone/code/model-hash.R')
trim.model(h)
h
head(model
)
length(model)
model[["IN"]]
trim.model(model)
model[["IN"]]
source('~/r/capstone/code/model-hash.R')
model[["IN"]]
trim.model(model)
model[["IN"]]
debugSource('~/r/capstone/code/model-hash.R')
trim.model(model)
model
debugSource('~/r/capstone/code/model-hash.R')
trim.model(model)
debugSource('~/r/capstone/code/model-hash.R')
